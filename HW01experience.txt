What challenges did you encounter with this assignment, if any?
One challenge I had with this assignment was determining how I should go about testing the program knowing that there is an error within it. I wanted to ensure the fault was being found, while also making sure I was testing all the logic in the program at the same time.

What did you think about the requirements specification for this assignment?
I thought the requirements could have been more specific. There was no clear format for how to perform the specification of the triangles, so I had to assume that a string format being edited throughout the program would be sufficient. I could have held classifications in variables or classes and then return the string name, but that wasn't clear so I had to go off of my intuition and what I thought would be best. Also, the requirements didn't say how to classify triangles that are also right triangles. Since isosceles and obtuse triangles can also be right, I had to make up my own way of showing that after the triangle was classified. I did this by simply adding " and Right" to the name of the triangle, but there are certainly other ways to do it. The requirements also did not provide instruction on how to handle inputs that would not produce a valid triangle. For example, the set 1, 1, 2 can not exist, therefore cannot be classified, but the requirements did not account for this, so I made up another classification called "Not a Triangle"

What challenges did you encounter with the tools?
One challenge I encounter was experimenting with different kinds of Asserts. I only ended up using two different kinds, "AssertEquals" and "AssertNotEquals", but there were many more that would've taken far more time to look at.

Describe the criteria you used to determine that you had sufficient test cases, i.e how did you know you were done?
My strategy for testing this program was making sure each if/else statement was working properly, since they were the majority of the logic in the program. I looked up valid triangle side sets online to find sets that are expected to work with my program, and I ran them through each set of checks to ensure the expected answer was returned. For isosceles and obtuse triangles, I checked them with and without right triangle properties. Since equilateral triangles cannot be right, there was no need to test the two classifications together. I checked to make sure that if the properties were correct, the proper classification would be given, and if not, the classification would be incorrect. Since I knew there was a bug in the isosceles check, the testIsosceles function failed, but the rest of the tests passed.